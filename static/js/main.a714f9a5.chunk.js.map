{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","data","setData","city","setCity","apiURL","useEffect","a","axios","get","response","fetchData","formatTemp","temp","toFixed","id","className","placeholder","value","onChange","event","target","weather","name","sys","country","main","description","temp_min","temp_max","pressure","humidity","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8QA2EeA,MAvEf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,OAEWF,mBAAS,MAFpB,mBAENG,EAFM,KAEAC,EAFA,KAGPC,EAAM,4DAAwDF,EAAxD,2CAEZG,qBAAU,YACO,uCAAG,4BAAAC,EAAA,6DAChBH,EAAQD,GADQ,SAEOK,IAAMC,IAAIJ,GAFjB,OAEVK,EAFU,OAGhBR,EAAQQ,EAAST,MAHD,2CAAH,qDAKfU,KACC,CAACR,IAEJ,IAAMS,EAAa,SAACC,GAClB,OAAQA,EAAO,QAAQC,QAAQ,IAGjC,OACE,qCACE,sBAAKC,GAAG,WAAR,UACE,oBAAIA,GAAG,UAAP,0BACA,qBAAKC,UAAU,MAAf,SACE,uBACEC,YAAY,sBACZD,UAAU,eACVE,MAAOf,EACPgB,SAAU,SAACC,GACThB,EAAQgB,EAAMC,OAAOH,YAI1BjB,EAAKqB,QACJ,qBAAKN,UAAU,OAAf,SACE,+BACE,+BACE,0CACCf,EAAKsB,KAFR,KAEgBtB,EAAKuB,IAAIC,QAFzB,OAIA,+BACE,8CACCxB,EAAKqB,QAAQ,GAAGI,KAFnB,MAE4BzB,EAAKqB,QAAQ,GAAGK,eAE5C,+BACE,iDACCf,EAAWX,EAAKyB,KAAKb,MAFxB,eAE8C,yCAC3CD,EAAWX,EAAKyB,KAAKE,UAHxB,UAG2C,0CACxChB,EAAWX,EAAKyB,KAAKG,UAJxB,YAMA,+BACE,8CACC5B,EAAKyB,KAAKI,SAFb,mBAE0C,+CACvC7B,EAAKyB,KAAKK,SAHb,aAQJ,mBAAGhB,GAAG,UAAN,mCAGJ,2DACwB,IACtB,oBAAGM,OAAO,SAASW,KAAK,8BAAxB,UACG,IADH,wBCtDOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a714f9a5.chunk.js","sourcesContent":["import \"./App.css\";\nimport axios from \"axios\";\nimport React, { useState, useEffect } from \"react\";\n\nfunction App() {\n  const [data, setData] = useState(\"\");\n  const [city, setCity] = useState(null);\n  const apiURL = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=6719d32b652fe28155d01d21980d3432`;\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setCity(city);\n      const response = await axios.get(apiURL);\n      setData(response.data);\n    };\n    fetchData();\n  }, [city]);\n\n  const formatTemp = (temp) => {\n    return (temp - 273.15).toFixed(2);\n  };\n\n  return (\n    <>\n      <div id=\"full-box\">\n        <h1 id=\"heading\">Weather Site</h1>\n        <div className=\"set\">\n          <input\n            placeholder=\"Search for any City\"\n            className=\"search-field\"\n            value={city}\n            onChange={(event) => {\n              setCity(event.target.value);\n            }}\n          />\n        </div>\n        {data.weather ? (\n          <div className=\"data\">\n            <ul>\n              <li>\n                <span>Name: </span>\n                {data.name} [{data.sys.country}]\n              </li>\n              <li>\n                <span> Weather: </span>\n                {data.weather[0].main} - {data.weather[0].description}\n              </li>\n              <li>\n                <span>Temperature: </span>\n                {formatTemp(data.main.temp)}&#176;C &nbsp; [<span>Min: </span>\n                {formatTemp(data.main.temp_min)}&#176;C -<span> Max: </span>\n                {formatTemp(data.main.temp_max)}&#176;C]\n              </li>\n              <li>\n                <span>Pressure: </span>\n                {data.main.pressure} mbar &nbsp; &nbsp; <span> Humidity: </span>\n                {data.main.humidity} %\n              </li>\n            </ul>\n          </div>\n        ) : (\n          <p id=\"no-data\">Data Not Available</p>\n        )}\n      </div>\n      <footer>\n        All data are based on{\" \"}\n        <a target=\"_blank\" href=\"https://openweathermap.org/\">\n          {\" \"}\n          OpenWeather\n        </a>\n      </footer>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}